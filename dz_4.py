# дз 4
'''
1) Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
В расчете необходимо использовать формулу: (выработка в часах*ставка в час) + премия. Для выполнения расчета
для конкретных значений необходимо запускать скрипт с параметрами.
'''

from sys import argv

working_hours, salary_per_our, bonus = argv[1:]

print(f'заработная плата сотрудника составляет: {float(working_hours) * float(salary_per_our) + float(bonus)}.\n\n')

'''
2) Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123].
'''
input_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]

new_list = [input_list[i] for i in range(1, len(input_list)) if input_list[i - 1] < input_list[i]]
print(new_list, '\n\n')

'''
3) Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
'''

numbers = [i for i in range(20, 240 + 1) if i % 20 == 0 or i % 21 ==0]
print(numbers, '\n\n')


'''
4) Представлен список чисел. Определить элементы списка, не имеющие повторений. Сформировать итоговый массив чисел,
 соответствующих требованию. Элементы вывести в порядке их следования в исходном списке. Для выполнения 
 задания обязательно использовать генератор.
'''

numbers = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
new_numbers = [number for number in numbers if numbers.count(number) == 1]
print(new_numbers, '\n\n')


'''
5) Реализовать формирование списка, используя функцию range() и возможности генератора.
 В список должны войти четные числа от 100 до 1000 (включая границы). Необходимо получить результат вычисления
  произведения всех элементов списка.
'''

from functools import reduce

numbers = [i for i in range(100, 1001, 2)]
print(numbers)

mult = reduce(lambda x, y: x * y, numbers)
print(f'произведение всех элементов списка: \n{mult}\n\n')


'''
6) Реализовать два небольших скрипта: 
    а) итератор, генерирующий целые числа, начиная с указанного, 
    б) итератор, повторяющий элементы некоторого списка, определенного заранее.
'''

from itertools import islice, count, cycle


def numbers_iterator(begin, end):
    if begin < 0:
        end += abs(begin) + 1
        return [i for i in islice(count(begin), end)]

    return [i for i in islice(count(begin), end)]


def repeat_iterator(list, count):
    if count == 0:
        return list

    return [elem for elem in islice(cycle(list), len(list) * count)]


try:
    numbers = numbers_iterator(1, 10)
    print(f'итератор, генерирующий целые числа, начиная с указанного: {numbers}')
    new_numbers = repeat_iterator(numbers, 2)
    print(f'итератор, повторяющий элементы некоторого списка, определенного заранее: {new_numbers}\n\n')
except ValueError as ex:
    print('введите верный интервал генерации чисел!')
    print('для функции numbers_iterator() верный интервал генерации имеет вид [start, end], где start <= end.')
    print('для функции repeat_iterator() количество повторений должно быть >= 0.\n')


'''
7) Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
 При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом: for el in fact(n).
  Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! 
  и до n!.
'''

def fact(n):
    if n == 0:
        yield 1

    res = 1
    for i in range(1, n + 1):
        res *= i
        yield res

for el in fact(6):
    print(el)